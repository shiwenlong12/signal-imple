var searchIndex = JSON.parse('{\
"numeric_enum_macro":{"doc":"A declarative macro for type-safe enum-to-numbers …","t":[14],"n":["numeric_enum"],"q":["numeric_enum_macro"],"d":["Declares an enum with a given numeric representation …"],"i":[0],"f":[0],"p":[]},\
"signal":{"doc":"信号的管理和处理模块","t":[13,13,13,13,3,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,3,4,4,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,12,12,11,11,11,11,10,12,11,11,11,11,10,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11],"n":["ERR","Handled","Ignored","IsHandlingSignal","LocalContext","MAX_SIG","NoSignal","ProcessKilled","ProcessSuspended","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGRT1","SIGRT10","SIGRT11","SIGRT12","SIGRT13","SIGRT14","SIGRT15","SIGRT16","SIGRT17","SIGRT18","SIGRT19","SIGRT2","SIGRT20","SIGRT21","SIGRT22","SIGRT23","SIGRT24","SIGRT25","SIGRT26","SIGRT27","SIGRT28","SIGRT29","SIGRT3","SIGRT30","SIGRT31","SIGRT4","SIGRT5","SIGRT6","SIGRT7","SIGRT8","SIGRT9","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","Signal","SignalAction","SignalNo","SignalResult","a","a_mut","add_signal","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","empty","eq","fmt","fmt","from","from","from","from","from","from_fork","get_action_ref","handle_signals","handler","interrupt","into","into","into","into","is_handling_signal","mask","move_next","pc","pc_mut","ra","set_action","sig_return","sp","sp_mut","supervisor","thread","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_mask","user","x","x_mut"],"q":["signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","已经处理了一个信号，并修改了用户上下文","…","目前正在处理信号，因而无法接受其他信号","线程上下文。","最大的信号编号","没有信号需要处理","…","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","一个信号模块需要对外暴露的接口","信号处理函数的定义","信号编号。","信号处理函数返回得到的结果","读取用户参数寄存器。","修改用户参数寄存器。","添加一个信号","","","","","","","","","<code>sys_exec</code>会使用。** <code>sys_exec</code> …","","","","","","","","创建空白上下文。","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","当 fork 一个任务时(在通常的<code>linux syscall</code>…","…","…","","线程中断是否开启。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","是否当前正在处理信号","","将 pc 移至下一条指令。","当前上下文的 pc。","修改上下文的 pc。","读取用户栈指针。","…","…","读取用户栈指针。","修改用户栈指针。","是否以特权态切换。","初始化指定入口的内核上下文。","","","","","","","","","","","","","","","","","设置信号掩码，并获取旧的信号掩码，…","初始化指定入口的用户上下文。","读取用户通用寄存器。","修改用户通用寄存器。"],"i":[3,12,12,12,0,0,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,1,1,9,4,3,12,1,4,3,12,1,9,4,3,1,4,3,1,4,1,3,4,3,4,3,3,12,1,9,9,9,4,1,4,3,12,1,9,4,1,1,1,1,9,9,1,1,1,1,4,3,1,4,3,3,12,1,4,3,12,1,4,3,12,1,9,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],2],[[1,2],2],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[3,3],[1,1],[[]],[[]],[[]],[[],4],[[],1],[[3,3],5],[[4,6],[[8,[7]]]],[[3,6],[[8,[7]]]],[[]],[2,3],[[]],[[]],[[]],[[],[[10,[9]]]],[3,[[11,[4]]]],[1,12],0,0,[[]],[[]],[[]],[[]],[[],5],0,[1],[1,2],[1,2],[1,2],[[3,4],5],[1,5],[1,2],[1,2],0,[[2,5],1],[[]],[[]],[[]],[[],8],[13,[[8,[3,13]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],14],[[],14],[[],14],[[],14],[2,2],[2,1],[[1,2],2],[[1,2],2]],"p":[[3,"LocalContext"],[15,"usize"],[4,"SignalNo"],[3,"SignalAction"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[8,"Signal"],[3,"Box"],[4,"Option"],[4,"SignalResult"],[15,"u8"],[3,"TypeId"]]},\
"signal_defs":{"doc":"","t":[13,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11],"n":["ERR","MAX_SIG","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGRT1","SIGRT10","SIGRT11","SIGRT12","SIGRT13","SIGRT14","SIGRT15","SIGRT16","SIGRT17","SIGRT18","SIGRT19","SIGRT2","SIGRT20","SIGRT21","SIGRT22","SIGRT23","SIGRT24","SIGRT25","SIGRT26","SIGRT27","SIGRT28","SIGRT29","SIGRT3","SIGRT30","SIGRT31","SIGRT4","SIGRT5","SIGRT6","SIGRT7","SIGRT8","SIGRT9","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SignalAction","SignalNo","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","eq","fmt","fmt","from","from","from","handler","into","into","mask","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["signal_defs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","最大的信号编号","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","信号处理函数的定义","信号编号。","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,2,1,2,1,2,1,2,1,2,1,2,2,1,1,2,1,1,2,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[],1],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[6,2],0,[[]],[[]],0,[[],7],[[],7],[8,[[7,[2,8]]]],[[],7],[[],7],[[],9],[[],9]],"p":[[3,"SignalAction"],[4,"SignalNo"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Result"],[15,"u8"],[3,"TypeId"]]},\
"signal_impl":{"doc":"一种信号模块的实现","t":[13,4,3,13,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11],"n":["Frozen","HandlingSignal","SignalImpl","UserSignal","actions","add_signal","borrow","borrow","borrow_mut","borrow_mut","clear","from","from","from_fork","get_action_ref","handle_signals","handling","into","into","is_handling_signal","mask","new","received","set_action","sig_return","try_from","try_from","try_into","try_into","type_id","type_id","update_mask"],"q":["signal_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","正在处理的信号","管理一个进程中的信号","","当前任务的信号处理函数集","添加一个信号","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","获取一个信号处理函数的值。<code>sys_sigaction</code> …","","在信号处理函数中，保存之前的用户栈","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","是否当前正在处理信号","屏蔽的信号掩码","创建一个新的信号管理器","已收到的信号","设置一个信号处理函数。<code>sys_sigaction</code> 会使用","","","","","","","","设置信号掩码，并获取旧的信号掩码，…"],"i":[13,0,0,13,1,1,13,1,13,1,1,13,1,1,1,1,1,13,1,1,1,1,1,1,1,13,1,13,1,13,1,1],"f":[0,0,0,0,0,[[1,2]],[[]],[[]],[[]],[[]],[1],[[]],[[]],[1,[[4,[3]]]],[[1,2],[[6,[5]]]],[[1,7],8],0,[[]],[[]],[1,9],0,[[],1],0,[[1,2,5],9],[[1,7],9],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[1,12],12]],"p":[[3,"SignalImpl"],[4,"SignalNo"],[8,"Signal"],[3,"Box"],[3,"SignalAction"],[4,"Option"],[3,"LocalContext"],[4,"SignalResult"],[15,"bool"],[4,"Result"],[3,"TypeId"],[15,"usize"],[4,"HandlingSignal"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
